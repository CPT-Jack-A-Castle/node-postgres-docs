{"data":{"site":{"siteMetadata":{"title":"node-postgres","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"3d64d443-d9ff-5e67-8cdd-f927b03f507c","title":"Transactions","slug":"/features/transactions"},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Transactions\",\n  \"slug\": \"/features/transactions\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To execute a transaction with node-postgres you simply execute \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BEGIN / COMMIT / ROLLBACK\"), \" queries yourself through a client. Because node-postgres strives to be low level an un-opinionated it doesn't provide any higher level abstractions specifically around transactions.\"), mdx(\"div\", {\n    className: \"alert alert-danger\"\n  }, \"You \", mdx(\"strong\", null, \"must\"), \" use the \", mdx(\"em\", null, \"same\"), \" client instance for all statements within a transaction. PostgreSQL isolates a transaction to individual clients. This means if you initialize or use transactions with the\", ' ', mdx(\"span\", {\n    className: \"code\"\n  }, \"pool.query\"), \" method you \", mdx(\"strong\", null, \"will\"), \" have problems. Do not use transactions with the \", mdx(\"span\", {\n    className: \"code\"\n  }, \"pool.query\"), \" method.\"), mdx(\"h2\", null, \"Examples\"), mdx(\"h3\", null, \"A pooled client with callbacks\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool } = require('client')\\nconst pool = new Pool()\\n\\npool.connect((err, client, done) => {\\n  const shouldAbort = err => {\\n    if (err) {\\n      console.error('Error in transaction', err.stack)\\n      client.query('ROLLBACK', err => {\\n        if (err) {\\n          console.error('Error rolling back client', err.stack)\\n        }\\n        // release the client back to the pool\\n        done()\\n      })\\n    }\\n    return !!err\\n  }\\n\\n  client.query('BEGIN', err => {\\n    if (shouldAbort(err)) return\\n    const queryText = 'INSERT INTO users(name) VALUES($1) RETURNING id'\\n    client.query(queryText, ['brianc'], (err, res) => {\\n      if (shouldAbort(err)) return\\n\\n      const insertPhotoText = 'INSERT INTO photos(user_id, photo_url) VALUES ($1, $2)'\\n      const insertPhotoValues = [res.rows[0].id, 's3.bucket.foo']\\n      client.query(insertPhotoText, insertPhotoValues, (err, res) => {\\n        if (shouldAbort(err)) return\\n\\n        client.query('COMMIT', err => {\\n          if (err) {\\n            console.error('Error committing transaction', err.stack)\\n          }\\n          done()\\n        })\\n      })\\n    })\\n  })\\n})\\n\")), mdx(\"div\", {\n    className: \"message is-info\"\n  }, mdx(\"div\", {\n    className: \"message-body\"\n  }, \"I omitted any additional libraries from the example for clarity, but if you're using callbacks you'd typically be using a flow control library like [async](https://github.com/caolan/async).\")), mdx(\"h3\", null, \"A pooled client with async/await\"), mdx(\"p\", null, \"Things are considerably more straightforward if you're using async/await:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool } = require('pg')\\nconst pool = new Pool()(async () => {\\n  // note: we don't try/catch this because if connecting throws an exception\\n  // we don't need to dispose of the client (it will be undefined)\\n  const client = await pool.connect()\\n\\n  try {\\n    await client.query('BEGIN')\\n    const queryText = 'INSERT INTO users(name) VALUES($1) RETURNING id'\\n    const { rows } = await client.query(queryText, ['brianc'])\\n\\n    const insertPhotoText = 'INSERT INTO photos(user_id, photo_url) VALUES ($1, $2)'\\n    const insertPhotoValues = [res.rows[0].id, 's3.bucket.foo']\\n    await client.query(insertPhotoText, insertPhotoValues)\\n    await client.query('COMMIT')\\n  } catch (e) {\\n    await client.query('ROLLBACK')\\n    throw e\\n  } finally {\\n    client.release()\\n  }\\n})().catch(e => console.error(e.stack))\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"tableOfContents":{"items":[{"url":"#examples","title":"Examples","items":[{"url":"#a-pooled-client-with-callbacks","title":"A pooled client with callbacks"},{"url":"#a-pooled-client-with-asyncawait","title":"A pooled client with async/await"}]}]},"parent":{"__typename":"File","relativePath":"features/4-transactions.mdx"},"frontmatter":{"metaTitle":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/features","title":"Features"}}},{"node":{"fields":{"slug":"/guides","title":"Guides"}}},{"node":{"fields":{"slug":"/announcements","title":"Announcements"}}},{"node":{"fields":{"slug":"/api","title":"API"}}},{"node":{"fields":{"slug":"/guides/async-express","title":"Express with async/await"}}},{"node":{"fields":{"slug":"/","title":"Welcome"}}},{"node":{"fields":{"slug":"/guides/project-structure","title":"Suggested Project Structure"}}},{"node":{"fields":{"slug":"/guides/upgrading","title":"Upgrading to 7.0"}}},{"node":{"fields":{"slug":"/api/types","title":"Types"}}},{"node":{"fields":{"slug":"/api/cursor","title":"pg.Cursor"}}},{"node":{"fields":{"slug":"/api/result","title":"pg.Result"}}},{"node":{"fields":{"slug":"/features/transactions","title":"Transactions"}}},{"node":{"fields":{"slug":"/features/connecting","title":"Connecting"}}},{"node":{"fields":{"slug":"/features/types","title":"Data Types"}}},{"node":{"fields":{"slug":"/api/pool","title":"pg.Pool"}}},{"node":{"fields":{"slug":"/features/native","title":"Native Bindings"}}},{"node":{"fields":{"slug":"/features/queries","title":"Queries"}}},{"node":{"fields":{"slug":"/features/pooling","title":"Pooling"}}},{"node":{"fields":{"slug":"/api/client","title":"pg.Client"}}},{"node":{"fields":{"slug":"/features/ssl","title":"SSL"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"3d64d443-d9ff-5e67-8cdd-f927b03f507c"}}