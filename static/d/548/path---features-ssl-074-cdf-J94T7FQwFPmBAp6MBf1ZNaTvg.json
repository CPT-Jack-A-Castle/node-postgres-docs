{"data":{"site":{"siteMetadata":{"title":"node-postgres","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"d4a058b2-cb54-5886-822d-d936742f6b55","title":"SSL","slug":"/features/ssl"},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"SSL\",\n  \"slug\": \"/features/ssl\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"node-postgres supports TLL/SSL connections to your PostgreSQL server as long as the server is configured to support it. When instantiating a pool or a query you can provide an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ssl\"), \" property on the config object and it will be passed to the constructor for the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/api/tls.html#tls_class_tls_tlssocket\"\n  }), \"node TLSSocket\"), \".\"), mdx(\"h2\", null, \"Self-signed cert\"), mdx(\"p\", null, \"Here's an example of a configuration you can use to connect a client or a pool to a PostgreSQL server.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const config = {\\n  database: 'database-name',\\n  host: 'host-or-ip',\\n  // this object will be passed to the TLSSocket constructor\\n  ssl: {\\n    rejectUnauthorized: false,\\n    ca: fs.readFileSync('/path/to/server-certificates/root.crt').toString(),\\n    key: fs.readFileSync('/path/to/client-key/postgresql.key').toString(),\\n    cert: fs.readFileSync('/path/to/client-certificates/postgresql.crt').toString(),\\n  },\\n}\\n\\nimport { Client, Pool } from 'pg'\\n\\nconst client = new Client(config)\\nclient.connect(err => {\\n  if (err) {\\n    console.error('error connecting', err.stack)\\n  } else {\\n    console.log('connected')\\n    client.end()\\n  }\\n})\\n\\nconst pool = new Pool(config)\\npool\\n  .connect()\\n  .then(client => {\\n    console.log('connected')\\n    client.release()\\n  })\\n  .catch(err => console.error('error connecting', err.stack))\\n  .then(() => pool.end())\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"tableOfContents":{"items":[{"url":"#self-signed-cert","title":"Self-signed cert"}]},"parent":{"__typename":"File","relativePath":"features/6-ssl.mdx"},"frontmatter":{"metaTitle":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/announcements","title":"Announcements"}}},{"node":{"fields":{"slug":"/","title":"Welcome"}}},{"node":{"fields":{"slug":"/api","title":"API"}}},{"node":{"fields":{"slug":"/features/connecting","title":"Connecting"}}},{"node":{"fields":{"slug":"/features/queries","title":"Queries"}}},{"node":{"fields":{"slug":"/features/types","title":"Data Types"}}},{"node":{"fields":{"slug":"/api/pool","title":"pg.Pool"}}},{"node":{"fields":{"slug":"/api/result","title":"pg.Result"}}},{"node":{"fields":{"slug":"/features/ssl","title":"SSL"}}},{"node":{"fields":{"slug":"/features/native","title":"Native Bindings"}}},{"node":{"fields":{"slug":"/api/cursor","title":"pg.Cursor"}}},{"node":{"fields":{"slug":"/features/pooling","title":"Pooling"}}},{"node":{"fields":{"slug":"/api/client","title":"pg.Client"}}},{"node":{"fields":{"slug":"/api/types","title":"Types"}}},{"node":{"fields":{"slug":"/features/transactions","title":"Transactions"}}},{"node":{"fields":{"slug":"/guides/project-structure","title":"Suggested Project Structure"}}},{"node":{"fields":{"slug":"/guides/async-express","title":"Express with async/await"}}},{"node":{"fields":{"slug":"/guides/upgrading","title":"Upgrading to 7.0"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"d4a058b2-cb54-5886-822d-d936742f6b55"}}