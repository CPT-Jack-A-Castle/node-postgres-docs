{"data":{"site":{"siteMetadata":{"title":"node-postgres","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"45606b6f-935b-5e1a-9a20-611f7873e846","title":"Express with async/await","slug":"/guides/async-express"},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Express with async/await\",\n  \"slug\": \"/guides/async-express\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"My preferred way to use node-postgres (and all async code in node.js) is with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async/await\"), \". I find it makes reasoning about control-flow easier and allows me to write more concice and maintainable code.\"), mdx(\"p\", null, \"This is how I typically structure express web-applications with node-postgres to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async/await\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"- app.js\\n- index.js\\n- routes/\\n  - index.js\\n  - photos.js\\n  - user.js\\n- db/\\n  - index.js <--- this is where I put data access code\\n\")), mdx(\"p\", null, \"That's the same structure I used in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/guides/project-structure\"\n  }), \"project structure\"), \" example.\"), mdx(\"p\", null, \"My \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db/index.js\"), \" file usually starts out like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool } = require('pg')\\n\\nmodule.exports = {\\n  query: (text, params) => pool.query(text, params),\\n}\\n\")), mdx(\"p\", null, \"Then I will install \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/express-promise-router\"\n  }), \"express-promise-router\"), \" and use it to define my routes. Here is my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"routes/user.js\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Router = require('express-promise-router')\\n\\nconst db = require('../db')\\n\\n// create a new express-promise-router\\n// this has the same API as the normal express router except\\n// it allows you to use async functions as route handlers\\nconst router = new Router()\\n\\n// export our router to be mounted by the parent application\\nmodule.exports = router\\n\\nrouter.get('/:id', async (req, res) => {\\n  const { id } = req.params\\n  const { rows } = await db.query('SELECT * FROM users WHERE id = $1', [id])\\n  res.send(rows[0])\\n})\\n\")), mdx(\"p\", null, \"Then in my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"routes/index.js\"), \" file I'll have something like this which mounts each individual router into the main application:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// ./routes/index.js\\nconst users = require('./user')\\nconst photos = require('./photos')\\n\\nmodule.exports = app => {\\n  app.use('/users', users)\\n  app.use('/photos', photos)\\n  // etc..\\n}\\n\")), mdx(\"p\", null, \"And finally in my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app.js\"), \" file where I bootstrap express I will have my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"routes/index.js\"), \" file mount all my routes. The routes know they're using async functions but because of express-promise-router the main express app doesn't know and doesn't care!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// ./app.js\\nconst express = require('express')\\nconst mountRoutes = require('./routes')\\n\\nconst app = express()\\nmountRoutes(app)\\n\\n// ... more express setup stuff can follow\\n\")), mdx(\"p\", null, \"Now you've got \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async/await\"), \", node-postgres, and express all working together!\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"tableOfContents":{},"parent":{"__typename":"File","relativePath":"guides/2-async-express.md"},"frontmatter":{"metaTitle":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/features","title":"Features"}}},{"node":{"fields":{"slug":"/guides","title":"Guides"}}},{"node":{"fields":{"slug":"/api","title":"API"}}},{"node":{"fields":{"slug":"/announcements","title":"Announcements"}}},{"node":{"fields":{"slug":"/","title":"Welcome"}}},{"node":{"fields":{"slug":"/api/pool","title":"pg.Pool"}}},{"node":{"fields":{"slug":"/guides/project-structure","title":"Suggested Project Structure"}}},{"node":{"fields":{"slug":"/api/cursor","title":"pg.Cursor"}}},{"node":{"fields":{"slug":"/api/result","title":"pg.Result"}}},{"node":{"fields":{"slug":"/api/types","title":"Types"}}},{"node":{"fields":{"slug":"/guides/upgrading","title":"Upgrading to 7.0"}}},{"node":{"fields":{"slug":"/guides/async-express","title":"Express with async/await"}}},{"node":{"fields":{"slug":"/features/connecting","title":"Connecting"}}},{"node":{"fields":{"slug":"/features/queries","title":"Queries"}}},{"node":{"fields":{"slug":"/features/pooling","title":"Pooling"}}},{"node":{"fields":{"slug":"/features/ssl","title":"SSL"}}},{"node":{"fields":{"slug":"/features/native","title":"Native Bindings"}}},{"node":{"fields":{"slug":"/features/types","title":"Data Types"}}},{"node":{"fields":{"slug":"/features/transactions","title":"Transactions"}}},{"node":{"fields":{"slug":"/api/client","title":"pg.Client"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"45606b6f-935b-5e1a-9a20-611f7873e846"}}