{"data":{"site":{"siteMetadata":{"title":"node-postgres","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"558c33b9-4c18-5cb8-b237-7c1b70f15153","title":"Result","slug":"/api/result"},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Result API\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pg.Result\"), \" shape is returned for every successful query.\"), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"result.rows: Array<any>\")), mdx(\"p\", null, \"Every result will have a rows array.  If no rows are returned the array will be empty. Otherwise the array will contain one item for each row returned from the query.  By default node-postgres creates a map from the name to value of each column, giving you a json-like object back for each row.\"), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"result.fields: Array<FieldInfo>\")), mdx(\"p\", null, \"Every result will have a fields array.  This array contains the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataTypeId\"), \" of each field in the result.  These fields are ordered in the same order as the columns if you are using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arrayMode\"), \" for the query:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool } = require('pg')\\n\\nconst pool = new Pool()\\n\\nconst client = await pool.connect()\\nconst result = await client.query({\\n  rowMode: 'array',\\n  text: 'SELECT 1 as one, 2 as two;'\\n})\\nconsole.log(result.fields[0].name) // one\\nconsole.log(result.fields[1].name) // two\\nconsole.log(result.rows) // [1, 2]\\nawait client.end()\\n\")), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"result.rowCount: int\")), mdx(\"p\", null, \"The number of rows processed by the last command.\"), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"result.command: string\")), mdx(\"p\", null, \"The command type last executed: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"INSERT\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UPDATE\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CREATE\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SELECT\"), \" etc.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"tableOfContents":{"items":[{"url":"#result-api","title":"Result API","items":[{"url":"#resultrows-arrayany","title":"result.rows: Array<any>"},{"url":"#resultfields-arrayfieldinfo","title":"result.fields: Array<FieldInfo>"},{"url":"#resultrowcount-int","title":"result.rowCount: int"},{"url":"#resultcommand-string","title":"result.command: string"}]}]},"parent":{"__typename":"File","relativePath":"api/result.md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/announcements","title":"Announcements"}}},{"node":{"fields":{"slug":"/","title":"Welcome"}}},{"node":{"fields":{"slug":"/api/query-stream","title":"Query Stream"}}},{"node":{"fields":{"slug":"/api/cursor","title":"Cursor"}}},{"node":{"fields":{"slug":"/api/types","title":"Types"}}},{"node":{"fields":{"slug":"/api/result","title":"Result"}}},{"node":{"fields":{"slug":"/api/query","title":"Query"}}},{"node":{"fields":{"slug":"/guides/project-structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/guides/async-express","title":"Async Express"}}},{"node":{"fields":{"slug":"/guides/upgrading","title":"Upgrading"}}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":{"slug":"/features/5-types","title":"Data Types"}}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":{"slug":"/features/1-connecting","title":"Connecting"}}},{"node":{"fields":{"slug":"/features/2-queries","title":"Queries"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"558c33b9-4c18-5cb8-b237-7c1b70f15153"}}